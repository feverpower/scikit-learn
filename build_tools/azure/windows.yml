
parameters:
  name: ''
  vmImage: ''
  matrix: []

jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  variables:
    VIRTUALENV: 'testvenv'
    JUNITXML: 'test-data.xml'
    SKLEARN_SKIP_NETWORK_TESTS: '1'
    TMP_FOLDER: '$(Agent.WorkFolder)\tmp_folder'
  strategy:
    matrix:
      ${{ insert }}: ${{ parameters.matrix }}

  steps:
    - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
      displayName: Add conda to PATH for 64 bit Python
      condition: eq(variables['PYTHON_ARCH'], '64')
    - powershell: |
        $wc = New-Object net.webclient
        $wc.Downloadfile("https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86.exe", "miniconda.exe")
        Start-Process miniconda.exe "/S /AddToPath=0 /D=miniconda /qn" -Wait
      displayName: Downloading miniconda for 32 bit Python
      condition: eq(variables['PYTHON_ARCH'], '32')
    - bash: |
        ls miniconda
    - powershell: Write-Host "##vso[task.prependpath]$env:BUILD_REPOSITORY_LOCALPATH\miniconda\Scripts"
      displayName: Add conda to PATH for 32 bit Python
      condition: eq(variables['PYTHON_ARCH'], '32')
    - script: |
        build_tools\\azure\\install.cmd
      displayName: 'Install'
    # - script: |
    #     build_tools\\azure\\test_script.cmd
    #   displayName: 'Test Library'
    # - task: PublishTestResults@2
    #   inputs:
    #     testResultsFiles: '$(TMP_FOLDER)\$(JUNITXML)'
    #     testRunTitle: ${{ format('{0}-$(Agent.JobName)', parameters.name) }}
    #   displayName: 'Publish Test Results'
    #   condition: succeededOrFailed()
